# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T01:06:39+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


class FailureReason(Enum):
    FAILURE_REASON_UNSPECIFIED = 'FAILURE_REASON_UNSPECIFIED'
    CONFIG = 'CONFIG'
    CAA = 'CAA'
    RATE_LIMITED = 'RATE_LIMITED'


class State(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    AUTHORIZING = 'AUTHORIZING'
    AUTHORIZED = 'AUTHORIZED'
    FAILED = 'FAILED'


class AuthorizationAttemptInfo(BaseModel):
    details: Optional[str] = Field(
        None,
        description='Output only. Human readable explanation for reaching the state. Provided to help address the configuration issues. Not guaranteed to be stable. For programmatic access use FailureReason enum.',
    )
    domain: Optional[str] = Field(
        None, description='Domain name of the authorization attempt.'
    )
    failureReason: Optional[FailureReason] = Field(
        None,
        description='Output only. Reason for failure of the authorization attempt for the domain.',
    )
    state: Optional[State] = Field(
        None,
        description='Output only. State of the domain for managed certificate issuance.',
    )


class CancelOperationRequest(BaseModel):
    pass


class Scope(Enum):
    DEFAULT = 'DEFAULT'
    EDGE_CACHE = 'EDGE_CACHE'


class CertificateAuthorityServiceConfig(BaseModel):
    caPool: Optional[str] = Field(
        None,
        description='Required. A CA pool resource used to issue a certificate. The CA pool string has a relative resource path following the form "projects/{project}/locations/{location}/caPools/{ca_pool}".',
    )


class KeyAlgorithm(Enum):
    KEY_ALGORITHM_UNSPECIFIED = 'KEY_ALGORITHM_UNSPECIFIED'
    RSA_2048 = 'RSA_2048'
    ECDSA_P256 = 'ECDSA_P256'


class Matcher(Enum):
    MATCHER_UNSPECIFIED = 'MATCHER_UNSPECIFIED'
    PRIMARY = 'PRIMARY'


class State1(Enum):
    SERVING_STATE_UNSPECIFIED = 'SERVING_STATE_UNSPECIFIED'
    ACTIVE = 'ACTIVE'
    PENDING = 'PENDING'


class CertificateMapEntry(BaseModel):
    certificates: Optional[List[str]] = Field(
        None,
        description='A set of Certificates defines for the given `hostname`. There can be defined up to four certificates in each Certificate Map Entry. Each certificate must match pattern `projects/*/locations/*/certificates/*`.',
    )
    createTime: Optional[str] = Field(
        None,
        description='Output only. The creation timestamp of a Certificate Map Entry.',
    )
    description: Optional[str] = Field(
        None,
        description='One or more paragraphs of text description of a certificate map entry.',
    )
    hostname: Optional[str] = Field(
        None,
        description='A Hostname (FQDN, e.g. `example.com`) or a wildcard hostname expression (`*.example.com`) for a set of hostnames with common suffix. Used as Server Name Indication (SNI) for selecting a proper certificate.',
    )
    labels: Optional[Dict[str, str]] = Field(
        None, description='Set of labels associated with a Certificate Map Entry.'
    )
    matcher: Optional[Matcher] = Field(
        None,
        description='A predefined matcher for particular cases, other than SNI selection.',
    )
    name: Optional[str] = Field(
        None,
        description='A user-defined name of the Certificate Map Entry. Certificate Map Entry names must be unique globally and match pattern `projects/*/locations/*/certificateMaps/*/certificateMapEntries/*`.',
    )
    state: Optional[State1] = Field(
        None, description='Output only. A serving state of this Certificate Map Entry.'
    )
    updateTime: Optional[str] = Field(
        None,
        description='Output only. The update timestamp of a Certificate Map Entry.',
    )


class DnsResourceRecord(BaseModel):
    data: Optional[str] = Field(
        None, description='Output only. Data of the DNS Resource Record.'
    )
    name: Optional[str] = Field(
        None,
        description='Output only. Fully qualified name of the DNS Resource Record. e.g. `_acme-challenge.example.com`',
    )
    type: Optional[str] = Field(
        None,
        description='Output only. Type of the DNS Resource Record. Currently always set to "CNAME".',
    )


class Empty(BaseModel):
    pass


class IntermediateCA(BaseModel):
    pemCertificate: Optional[str] = Field(
        None,
        description='PEM intermediate certificate used for building up paths for validation. Each certificate provided in PEM format may occupy up to 5kB.',
    )


class IpConfig(BaseModel):
    ipAddress: Optional[str] = Field(
        None, description='Output only. An external IP address.'
    )
    ports: Optional[List[int]] = Field(None, description='Output only. Ports.')


class ListCertificateMapEntriesResponse(BaseModel):
    certificateMapEntries: Optional[List[CertificateMapEntry]] = Field(
        None, description='A list of certificate map entries for the parent resource.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='If there might be more results than those appearing in this response, then `next_page_token` is included. To get the next set of results, call this method again using the value of `next_page_token` as `page_token`.',
    )
    unreachable: Optional[List[str]] = Field(
        None, description='Locations that could not be reached.'
    )


class Location(BaseModel):
    displayName: Optional[str] = Field(
        None,
        description='The friendly name for this location, typically a nearby city name. For example, "Tokyo".',
    )
    labels: Optional[Dict[str, str]] = Field(
        None,
        description='Cross-service attributes for the location. For example {"cloud.googleapis.com/region": "us-east1"}',
    )
    locationId: Optional[str] = Field(
        None,
        description='The canonical id for this location. For example: `"us-east1"`.',
    )
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description='Service-specific metadata. For example the available capacity at the given location.',
    )
    name: Optional[str] = Field(
        None,
        description='Resource name for the location, which may vary between implementations. For example: `"projects/example-project/locations/us-east1"`',
    )


class State2(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    PROVISIONING = 'PROVISIONING'
    FAILED = 'FAILED'
    ACTIVE = 'ACTIVE'


class OperationMetadata(BaseModel):
    apiVersion: Optional[str] = Field(
        None, description='API version used to start the operation.'
    )
    createTime: Optional[str] = Field(
        None, description='The time the operation was created.'
    )
    endTime: Optional[str] = Field(
        None, description='The time the operation finished running.'
    )
    requestedCancellation: Optional[bool] = Field(
        None,
        description='Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.',
    )
    statusMessage: Optional[str] = Field(
        None, description='Human-readable status of the operation, if any.'
    )
    target: Optional[str] = Field(
        None,
        description='Server-defined resource path for the target of the operation.',
    )
    verb: Optional[str] = Field(
        None, description='Name of the verb executed by the operation.'
    )


class Reason(Enum):
    REASON_UNSPECIFIED = 'REASON_UNSPECIFIED'
    AUTHORIZATION_ISSUE = 'AUTHORIZATION_ISSUE'
    RATE_LIMITED = 'RATE_LIMITED'


class ProvisioningIssue(BaseModel):
    details: Optional[str] = Field(
        None,
        description='Output only. Human readable explanation about the issue. Provided to help address the configuration issues. Not guaranteed to be stable. For programmatic access use Reason enum.',
    )
    reason: Optional[Reason] = Field(
        None, description='Output only. Reason for provisioning failures.'
    )


class SelfManagedCertificate(BaseModel):
    pemCertificate: Optional[str] = Field(
        None,
        description='Input only. The PEM-encoded certificate chain. Leaf certificate comes first, followed by intermediate ones if any.',
    )
    pemPrivateKey: Optional[str] = Field(
        None,
        description='Input only. The PEM-encoded private key of the leaf certificate.',
    )


class Status(BaseModel):
    code: Optional[int] = Field(
        None,
        description='The status code, which should be an enum value of google.rpc.Code.',
    )
    details: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='A list of messages that carry the error details. There is a common set of message types for APIs to use.',
    )
    message: Optional[str] = Field(
        None,
        description='A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.',
    )


class TrustAnchor(BaseModel):
    pemCertificate: Optional[str] = Field(
        None,
        description='PEM root certificate of the PKI used for validation. Each certificate provided in PEM format may occupy up to 5kB.',
    )


class TrustStore(BaseModel):
    intermediateCas: Optional[List[IntermediateCA]] = Field(
        None,
        description='Set of intermediate CA certificates used for the path building phase of chain validation. The field is currently not supported if TrustConfig is used for the workload certificate feature.',
    )
    trustAnchors: Optional[List[TrustAnchor]] = Field(
        None,
        description='List of Trust Anchors to be used while performing validation against a given TrustStore.',
    )


class FieldXgafv(Enum):
    field_1 = '1'
    field_2 = '2'


class Alt(Enum):
    json = 'json'
    media = 'media'
    proto = 'proto'


class CertificateAuthorityConfig(BaseModel):
    certificateAuthorityServiceConfig: Optional[CertificateAuthorityServiceConfig] = (
        Field(None, description='Defines a CertificateAuthorityServiceConfig.')
    )


class CertificateIssuanceConfig(BaseModel):
    certificateAuthorityConfig: Optional[CertificateAuthorityConfig] = Field(
        None,
        description='Required. The CA that issues the workload certificate. It includes the CA address, type, authentication to CA service, etc.',
    )
    createTime: Optional[str] = Field(
        None,
        description='Output only. The creation timestamp of a CertificateIssuanceConfig.',
    )
    description: Optional[str] = Field(
        None,
        description='One or more paragraphs of text description of a CertificateIssuanceConfig.',
    )
    keyAlgorithm: Optional[KeyAlgorithm] = Field(
        None,
        description='Required. The key algorithm to use when generating the private key.',
    )
    labels: Optional[Dict[str, str]] = Field(
        None, description='Set of labels associated with a CertificateIssuanceConfig.'
    )
    lifetime: Optional[str] = Field(
        None, description='Required. Workload certificate lifetime requested.'
    )
    name: Optional[str] = Field(
        None,
        description='A user-defined name of the certificate issuance config. CertificateIssuanceConfig names must be unique globally and match pattern `projects/*/locations/*/certificateIssuanceConfigs/*`.',
    )
    rotationWindowPercentage: Optional[int] = Field(
        None,
        description='Required. Specifies the percentage of elapsed time of the certificate lifetime to wait before renewing the certificate. Must be a number between 1-99, inclusive.',
    )
    updateTime: Optional[str] = Field(
        None,
        description='Output only. The last update timestamp of a CertificateIssuanceConfig.',
    )


class DnsAuthorization(BaseModel):
    createTime: Optional[str] = Field(
        None, description='Output only. The creation timestamp of a DnsAuthorization.'
    )
    description: Optional[str] = Field(
        None,
        description='One or more paragraphs of text description of a DnsAuthorization.',
    )
    dnsResourceRecord: Optional[DnsResourceRecord] = Field(
        None,
        description='Output only. DNS Resource Record that needs to be added to DNS configuration.',
    )
    domain: Optional[str] = Field(
        None,
        description='Required. Immutable. A domain that is being authorized. A DnsAuthorization resource covers a single domain and its wildcard, e.g. authorization for `example.com` can be used to issue certificates for `example.com` and `*.example.com`.',
    )
    labels: Optional[Dict[str, str]] = Field(
        None, description='Set of labels associated with a DnsAuthorization.'
    )
    name: Optional[str] = Field(
        None,
        description='A user-defined name of the dns authorization. DnsAuthorization names must be unique globally and match pattern `projects/*/locations/*/dnsAuthorizations/*`.',
    )
    updateTime: Optional[str] = Field(
        None,
        description='Output only. The last update timestamp of a DnsAuthorization.',
    )


class GclbTarget(BaseModel):
    ipConfigs: Optional[List[IpConfig]] = Field(
        None,
        description='Output only. IP configurations for this Target Proxy where the Certificate Map is serving.',
    )
    targetHttpsProxy: Optional[str] = Field(
        None,
        description='Output only. This field returns the resource name in the following format: `//compute.googleapis.com/projects/*/global/targetHttpsProxies/*`.',
    )
    targetSslProxy: Optional[str] = Field(
        None,
        description='Output only. This field returns the resource name in the following format: `//compute.googleapis.com/projects/*/global/targetSslProxies/*`.',
    )


class ListCertificateIssuanceConfigsResponse(BaseModel):
    certificateIssuanceConfigs: Optional[List[CertificateIssuanceConfig]] = Field(
        None, description='A list of certificate configs for the parent resource.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='If there might be more results than those appearing in this response, then `next_page_token` is included. To get the next set of results, call this method again using the value of `next_page_token` as `page_token`.',
    )
    unreachable: Optional[List[str]] = Field(
        None, description='Locations that could not be reached.'
    )


class ListDnsAuthorizationsResponse(BaseModel):
    dnsAuthorizations: Optional[List[DnsAuthorization]] = Field(
        None, description='A list of dns authorizations for the parent resource.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='If there might be more results than those appearing in this response, then `next_page_token` is included. To get the next set of results, call this method again using the value of `next_page_token` as `page_token`.',
    )
    unreachable: Optional[List[str]] = Field(
        None, description='Locations that could not be reached.'
    )


class ListLocationsResponse(BaseModel):
    locations: Optional[List[Location]] = Field(
        None,
        description='A list of locations that matches the specified filter in the request.',
    )
    nextPageToken: Optional[str] = Field(
        None, description='The standard List next-page token.'
    )


class ManagedCertificate(BaseModel):
    authorizationAttemptInfo: Optional[List[AuthorizationAttemptInfo]] = Field(
        None,
        description='Output only. Detailed state of the latest authorization attempt for each domain specified for managed certificate resource.',
    )
    dnsAuthorizations: Optional[List[str]] = Field(
        None,
        description='Immutable. Authorizations that will be used for performing domain authorization.',
    )
    domains: Optional[List[str]] = Field(
        None,
        description='Immutable. The domains for which a managed SSL certificate will be generated. Wildcard domains are only supported with DNS challenge resolution.',
    )
    issuanceConfig: Optional[str] = Field(
        None,
        description='Immutable. The resource name for a CertificateIssuanceConfig used to configure private PKI certificates in the format `projects/*/locations/*/certificateIssuanceConfigs/*`. If this field is not set, the certificates will instead be publicly signed as documented at https://cloud.google.com/load-balancing/docs/ssl-certificates/google-managed-certs#caa.',
    )
    provisioningIssue: Optional[ProvisioningIssue] = Field(
        None,
        description='Output only. Information about issues with provisioning a Managed Certificate.',
    )
    state: Optional[State2] = Field(
        None, description='Output only. State of the managed certificate resource.'
    )


class Operation(BaseModel):
    done: Optional[bool] = Field(
        None,
        description='If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.',
    )
    error: Optional[Status] = Field(
        None,
        description='The error result of the operation in case of failure or cancellation.',
    )
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description='Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.',
    )
    name: Optional[str] = Field(
        None,
        description='The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.',
    )
    response: Optional[Dict[str, Any]] = Field(
        None,
        description='The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.',
    )


class TrustConfig(BaseModel):
    createTime: Optional[str] = Field(
        None, description='Output only. The creation timestamp of a TrustConfig.'
    )
    description: Optional[str] = Field(
        None, description='One or more paragraphs of text description of a TrustConfig.'
    )
    etag: Optional[str] = Field(
        None,
        description='This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.',
    )
    labels: Optional[Dict[str, str]] = Field(
        None, description='Set of labels associated with a TrustConfig.'
    )
    name: Optional[str] = Field(
        None,
        description='A user-defined name of the trust config. TrustConfig names must be unique globally and match pattern `projects/*/locations/*/trustConfigs/*`.',
    )
    trustStores: Optional[List[TrustStore]] = Field(
        None,
        description='Set of trust stores to perform validation against. This field is supported when TrustConfig is configured with Load Balancers, currently not supported for SPIFFE certificate validation. Only one TrustStore specified is currently allowed.',
    )
    updateTime: Optional[str] = Field(
        None, description='Output only. The last update timestamp of a TrustConfig.'
    )


class Certificate(BaseModel):
    createTime: Optional[str] = Field(
        None, description='Output only. The creation timestamp of a Certificate.'
    )
    description: Optional[str] = Field(
        None, description='One or more paragraphs of text description of a certificate.'
    )
    expireTime: Optional[str] = Field(
        None, description='Output only. The expiry timestamp of a Certificate.'
    )
    labels: Optional[Dict[str, str]] = Field(
        None, description='Set of labels associated with a Certificate.'
    )
    managed: Optional[ManagedCertificate] = Field(
        None,
        description='If set, contains configuration and state of a managed certificate.',
    )
    name: Optional[str] = Field(
        None,
        description='A user-defined name of the certificate. Certificate names must be unique globally and match pattern `projects/*/locations/*/certificates/*`.',
    )
    pemCertificate: Optional[str] = Field(
        None, description='Output only. The PEM-encoded certificate chain.'
    )
    sanDnsnames: Optional[List[str]] = Field(
        None,
        description="Output only. The list of Subject Alternative Names of dnsName type defined in the certificate (see RFC 5280 4.2.1.6). Managed certificates that haven't been provisioned yet have this field populated with a value of the managed.domains field.",
    )
    scope: Optional[Scope] = Field(
        None, description='Immutable. The scope of the certificate.'
    )
    selfManaged: Optional[SelfManagedCertificate] = Field(
        None, description='If set, defines data of a self-managed certificate.'
    )
    updateTime: Optional[str] = Field(
        None, description='Output only. The last update timestamp of a Certificate.'
    )


class CertificateMap(BaseModel):
    createTime: Optional[str] = Field(
        None, description='Output only. The creation timestamp of a Certificate Map.'
    )
    description: Optional[str] = Field(
        None,
        description='One or more paragraphs of text description of a certificate map.',
    )
    gclbTargets: Optional[List[GclbTarget]] = Field(
        None,
        description="Output only. A list of GCLB targets that use this Certificate Map. A Target Proxy is only present on this list if it's attached to a Forwarding Rule.",
    )
    labels: Optional[Dict[str, str]] = Field(
        None, description='Set of labels associated with a Certificate Map.'
    )
    name: Optional[str] = Field(
        None,
        description='A user-defined name of the Certificate Map. Certificate Map names must be unique globally and match pattern `projects/*/locations/*/certificateMaps/*`.',
    )
    updateTime: Optional[str] = Field(
        None, description='Output only. The update timestamp of a Certificate Map.'
    )


class ListCertificateMapsResponse(BaseModel):
    certificateMaps: Optional[List[CertificateMap]] = Field(
        None, description='A list of certificate maps for the parent resource.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='If there might be more results than those appearing in this response, then `next_page_token` is included. To get the next set of results, call this method again using the value of `next_page_token` as `page_token`.',
    )
    unreachable: Optional[List[str]] = Field(
        None, description='Locations that could not be reached.'
    )


class ListCertificatesResponse(BaseModel):
    certificates: Optional[List[Certificate]] = Field(
        None, description='A list of certificates for the parent resource.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='If there might be more results than those appearing in this response, then `next_page_token` is included. To get the next set of results, call this method again using the value of `next_page_token` as `page_token`.',
    )
    unreachable: Optional[List[str]] = Field(
        None, description='A list of locations that could not be reached.'
    )


class ListOperationsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None, description='The standard List next-page token.'
    )
    operations: Optional[List[Operation]] = Field(
        None,
        description='A list of operations that matches the specified filter in the request.',
    )


class ListTrustConfigsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='If there might be more results than those appearing in this response, then `next_page_token` is included. To get the next set of results, call this method again using the value of `next_page_token` as `page_token`.',
    )
    trustConfigs: Optional[List[TrustConfig]] = Field(
        None, description='A list of TrustConfigs for the parent resource.'
    )
    unreachable: Optional[List[str]] = Field(
        None, description='Locations that could not be reached.'
    )
